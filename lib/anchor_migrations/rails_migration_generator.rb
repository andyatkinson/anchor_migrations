# frozen_string_literal: true

module AnchorMigrations
  #
  # Create a Rails migration from Anchor Migration SQL
  # Expects Anchor Migrations to be in db/anchor_migrations
  # Expects to generate Rails Migrations into db/migrate
  # Expects to parse a Rails-style timestamp from beginning of Anchor Migrations file
  #
  class RailsMigrationGenerator
    def initialize(anchor_migrations_dir: AnchorMigrations::DEFAULT_DIR)
      if @anchor_migration_file = Dir["#{anchor_migrations_dir}/*.sql"].max
        @migration_version = File.basename(@anchor_migration_file).split("_").first
        sql_file_content = File.read(@anchor_migration_file)
        @cleaned_sql_ddl = AnchorMigrations::Utility.cleaned_sql(sql_file_content)
        build_file_name_and_class_name
        AnchorMigrations::RailsLoader.load_rails!
      else
        abort "Can't find dir #{anchor_migrations_dir} or file #{Dir["#{anchor_migrations_dir}/*.sql"]}"
      end
    end

    def generate(write_file: true)
      output_file = "#{AnchorMigrations::RAILS_MIG_DIR}/#{@migration_version}_#{@migration_file_name_no_version}"
      migration_content = rails_generate_migration_code
      if write_file
        File.write(output_file, migration_content)
        puts "Wrote file: #{output_file}"
        puts File.read(output_file)
      end
      migration_content # for tests
    end

    private

    def rails_version_major_minor
      if defined?(Rails) && defined?(Rails::VERSION)
        major = Rails::VERSION::MAJOR
        minor = Rails::VERSION::MINOR
        "#{major}.#{minor}"
      else
        "X.Y" # can't load Rails, this is only for testing outside Rails
      end
    end

    def build_file_name_and_class_name
      # Strip out the Rails-style version number
      @migration_version = File.basename(@anchor_migration_file).split("_").first

      # Break up by underscore, and join together with underscore, for only the basename
      path = File.basename(@anchor_migration_file)
                 .split("_")[1..-1].join("_")

      # Strip out the extension (.sql)
      filename_base = File.basename(path, File.extname(path))

      # Create a capitalized words version for the migration class name
      @migration_class_name = filename_base.split("_")
                                           .map(&:capitalize).join

      # Create a filename with .rb extension
      @migration_file_name_no_version = "#{filename_base}.rb"
    end

    def migration_change_method_body
      if AnchorMigrations.configuration.use_strong_migrations
        <<-TEMPL
        safety_assured do
          execute <<-SQL
            #{@cleaned_sql_ddl}
          SQL
        end
        TEMPL
      else
        <<-TEMPL
        execute <<-SQL
          #{@cleaned_sql_ddl}
        SQL
        TEMPL
      end
    end

    # Assume it's a concurrently operation for now, disable_ddl_transaction!
    def rails_generate_migration_code
      <<~MIG_TEMPLATE.strip
        #
        # ################################################
        # DO NOT EDIT, generated by Anchor Migrations
        # Version: #{@migration_version}
        # Source File: #{@anchor_migration_file}
        # Target File: #{AnchorMigrations::RAILS_MIG_DIR}/#{@migration_version}_#{@migration_file_name_no_version}
        # ################################################
        #
        class #{@migration_class_name} < ActiveRecord::Migration[#{rails_version_major_minor}]
          disable_ddl_transaction!

          def change
            #{migration_change_method_body}
          end
        end
      MIG_TEMPLATE
    end
  end
end
