# frozen_string_literal: true

# test/anchor_migrations/rails_migration_generator_test.rb

require "test_helper"
require "anchor_migrations/rails_migration_generator"

module AnchorMigrations
  class RailsMigrationGeneratorTest < Minitest::Test
    def setup
      AnchorMigrations.reset

      @generator = RailsMigrationGenerator.new(
        migrations_dir: "test/anchor_migrations"
      )
    end

    # TODO: test migration file name

    def test_generate_migration_content
      assert_instance_of RailsMigrationGenerator, @generator
      migration_content = @generator.generate(write_file: false)
      expected = <<~EXPECTED
        #
        # ################################################
        # DO NOT EDIT, generated by Anchor Migrations
        # Version: 20250623032400
        # File: test/anchor_migrations/20250623032400_anchor_migration.sql
        # ################################################
        #
        class CreateIndexIdxTblCol < ActiveRecord::Migration[X.Y]
          disable_ddl_transaction!

          def change
            execute <<-SQL
              CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_tbl_col ON tbl (col);
            SQL
          end
        end
      EXPECTED

      normalize = ->(s) { s.strip.gsub(/\s+/, " ") }
      assert normalize.call(expected) == normalize.call(migration_content)
    end

    def test_generate_migration_content_use_strong_migrations
      AnchorMigrations.configure do |config|
        config.use_strong_migrations = true
      end

      migration_content = @generator.generate(write_file: false)
      expected = <<~EXPECTED
        #
        # ################################################
        # DO NOT EDIT, generated by Anchor Migrations
        # Version: 20250623032400
        # File: test/anchor_migrations/20250623032400_anchor_migration.sql
        # ################################################
        #
        class CreateIndexIdxTblCol < ActiveRecord::Migration[X.Y]
          disable_ddl_transaction!

          def change
            safety_assured do
              execute <<-SQL
                CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_tbl_col ON tbl (col);
              SQL
            end
          end
        end
      EXPECTED

      normalize = ->(s) { s.strip.gsub(/\s+/, " ") }
      assert normalize.call(expected) == normalize.call(migration_content)
    end
  end
end
